buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin:'application'

jar {
    baseName = 'gs-accessing-data-mongodb'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "com.cr0mbly.whereshouldibuy.WhereshouldibuyApplication"

dependencies {
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-tomcat")

    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    testCompile("org.springframework.boot:spring-boot-starter-test")

    compile group: 'org.springframework.security', name: 'spring-security-config', version: '4.2.0.RELEASE'

    compile ('org.springframework.security:spring-security-web:4.2.0.RELEASE')
    compile ('org.springframework.security:spring-security-web:4.2.0.RELEASE')

    compile('org.springframework:spring-webmvc:4.2.0.RELEASE')
    testCompile('org.springframework:spring-webmvc:4.2.0.RELEASE')

    compile(group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2')
    testCompile(group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2')

    compile('com.google.code.gson:gson:1.7.2')
    testCompile('com.google.code.gson:gson:1.7.2')
}

task myRun(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "com.cr0mbly.whereshouldibuy.WhereshouldibuyApplication"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2'
}

task buildTmpDirectories(){
    doLast() {
        def localDB = new File("${projectDir}/tmp/DB/users")
        def localDBLog = new File("${projectDir}/tmp/DB/logs")

        localDB.mkdirs();
        localDBLog.mkdirs();
    }
}


task startLocalDB(){
    doLast() {
        exec {
            commandLine  "mongod", "--port", "27017", "--dbpath", "${projectDir}/tmp/DB/users"
        }
        println("local database started")
    }
}

task scrubDB(type:Delete){
    doLast() {
        delete fileTree(dir: "${projectDir}/tmp/}")
        println("Database Deleted ")
    }
}

task stopDB(type:Exec) {
    doLast(){
        commandLine "mongod", "--shutdown"
        println("----------DataBase Server Stoped -------")

    }
}

//task runFullSetup(dependsOn : [startLocalDB, run]){
//}

//run.dependsOn startLocalDB
